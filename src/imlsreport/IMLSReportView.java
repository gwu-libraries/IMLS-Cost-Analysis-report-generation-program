/*
 * IMLSReportView.java
 */

package imlsreport;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.io.*;
import java.sql.*;
import com.microsoft.sqlserver.jdbc.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.ProtocolException;
import java.net.URL;
import java.net.URLConnection;
import java.util.StringTokenizer;
import jxl.CellView;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.format.UnderlineStyle;
import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import java.util.Locale;
import java.awt.image.*;
import javax.imageio.*;
import java.util.Iterator;
import com.jcraft.jsch.*;
import java.util.Arrays;
import javax.imageio.stream.ImageOutputStream;
/**
 * The application's main frame.
 */
public class IMLSReportView extends FrameView {

    public IMLSReportView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = IMLSReportApp.getApplication().getMainFrame();
            aboutBox = new IMLSReportAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        IMLSReportApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(imlsreport.IMLSReportApp.class).getContext().getResourceMap(IMLSReportView.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jDateChooser1.setName("jDateChooser1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jDateChooser2.setName("jDateChooser2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(92, 92, 92)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(jButton1)))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(46, 46, 46)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))))
                .addGap(51, 51, 51)
                .addComponent(jButton1)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(imlsreport.IMLSReportApp.class).getContext().getActionMap(IMLSReportView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 310, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        SimpleDateFormat formatter= new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        System.out.println(jDateChooser1.getDate());
         System.out.println(jDateChooser2.getDate());
        Date startdate=jDateChooser1.getDate();
        Date enddate =jDateChooser2.getDate();
        formatter.format(startdate);
        formatter.format(enddate);
        File f = new File("C:/"+jTextField1.getText());
        DB db = new DB();
        try
        {
            Connection con = db.dbConnect(
                "jdbc:sqlserver://localhost:3595","administrator","server034techs**");
            Tunnel t = new Tunnel();
            t.go();
            t.getRecord(con, startdate, enddate,f);

           /* String qry = "SELECT o.customer_barcode,o.numberOfPages,w.dateStarted,w.DateEnded FROM OrderBookWorkflowStep w join OrderBook o on w.orderBook_ID=o.ID where w.WorkflowStep_Code='OCR' and w.dateStarted>='"+formatter.format(startdate)+"' and w.dateEnded <='"+formatter.format(enddate)+"'";
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(qry);

            WriteExcel testwrite = new WriteExcel();
            WorkbookSettings wbSettings = new WorkbookSettings();

		wbSettings.setLocale(new Locale("en", "EN"));

		WritableWorkbook workbook = Workbook.createWorkbook(f, wbSettings);
		workbook.createSheet("Report", 0);
		WritableSheet excelSheet = workbook.getSheet(0);
		testwrite.createLabel(excelSheet,startdate,enddate);




            //PrintWriter pr = new PrintWriter(test);
            //pr.println("Barcode \t Pages \t Language \t Title \t Start Date,\t End Date" );
            String filter,lan,desc,title,barcode,start,end,pages;
            String[] vals = new String[6];
            int i =2;
            while (rs.next()) {
                System.out.println(rs.getString(1));
                String val=HTTPRequestPoster.sendGetRequest("http://gwdroid.wrlc.org/barcode/getmarc.php", "barcode="+rs.getString(1));
                StringTokenizer st = new StringTokenizer(val, "|");
                filter="";
                lan="";
                desc="";
                title="";
                barcode="";
                start="";
                end="";
                pages="";
                  /*if(st.hasMoreTokens())
                   {
                       filter = st.nextToken();
                   }*/
                /*if(st.hasMoreTokens())
                   {
                    vals[2] = st.nextToken();//language
                   }
                if(st.hasMoreTokens())
                   {
                   vals[3] = st.nextToken();//title
                }
                if(st.hasMoreTokens())
                   {
                        vals[4] = st.nextToken();//description
                }

                    vals[0] = rs.getString(1);//barcode


                   // start = rs.getString(3);


                        vals[5] = rs.getString(4);//end date


                    vals[1] = rs.getString(2);//pages

                    //pr.println(barcode +" \t "+pages+ " \t "+ lan + " \t "+ title + " \t "+ start + " \t "+ end);
                    testwrite.createContent(excelSheet, i, vals);
                    i++;

            }
                //pr.close();
            workbook.write();
            workbook.close();
                System.out.println("done");
        }*/
        }
        catch(Exception e)
        {
            System.out.println("Exception "+e);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
class DB
{
    public DB() {}

    public Connection dbConnect(String db_connect_string,
  String db_userid, String db_password)
    {
         Connection conn=null;
        try
        {
            SQLServerDataSource ds = new SQLServerDataSource();
         ds.setUser(db_userid);
         ds.setPassword(db_password);
         ds.setServerName("localhost");
         ds.setPortNumber(3595);
         ds.setDatabaseName("KILTS");

            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            conn = ds.getConnection();
            System.out.println("connected");
            return conn;
            
            
            


        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return conn;
    }
}
class HTTPRequestPoster
{
/**
* Sends an HTTP GET request to a url
*
* @param endpoint - The URL of the server. (Example: " http://www.yahoo.com/search")
* @param requestParameters - all the request parameters (Example: "param1=val1&param2=val2"). Note: This method will add the question mark (?) to the request - DO NOT add it yourself
* @return - The response from the end point
*/
public static String sendGetRequest(String endpoint, String requestParameters)
{
String result = null;
if (endpoint.startsWith("http://"))
{
// Send a GET request to the servlet
try
{
// Send data
String urlStr = endpoint;
if (requestParameters != null && requestParameters.length () > 0)
{
urlStr += "?" + requestParameters;
}
URL url = new URL(urlStr);
URLConnection conn = url.openConnection ();
// Get the response
BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
StringBuffer sb = new StringBuffer();
String line;
while ((line = rd.readLine()) != null)
{
sb.append(line);
}
rd.close();
result = sb.toString();
} catch (Exception e)
{
e.printStackTrace();
}
}
return result;
}
/**
* Reads data from the data reader and posts it to a server via POST request.
* data - The data you want to send
* endpoint - The server's address
* output - writes the server's response to output
* @throws Exception
*/
public static void postData(Reader data, URL endpoint, Writer output) throws Exception
{
HttpURLConnection urlc = null;
try
{
urlc = (HttpURLConnection) endpoint.openConnection();
try
{
urlc.setRequestMethod("POST");
} catch (ProtocolException e)
{
throw new Exception("Shouldn't happen: HttpURLConnection doesn't support POST??", e);
}
urlc.setDoOutput(true);
urlc.setDoInput(true);
urlc.setUseCaches(false);
urlc.setAllowUserInteraction(false);
urlc.setRequestProperty("Content-type", "text/xml; charset=" + "UTF-8");
OutputStream out = urlc.getOutputStream();
try
{
Writer writer = new OutputStreamWriter(out, "UTF-8");
pipe(data, writer);
writer.close();
} catch (IOException e)
{
throw new Exception("IOException while posting data", e);
} finally
{
if (out != null)
out.close();
}
InputStream in = urlc.getInputStream();
try
{
Reader reader = new InputStreamReader(in);
pipe(reader, output);
reader.close();
} catch (IOException e)
{
throw new Exception("IOException while reading response", e);
} finally
{
if (in != null)
in.close();
}
} catch (IOException e)
{
throw new Exception("Connection error (is server running at " + endpoint + " ?): " + e);
} finally
{
if (urlc != null)
urlc.disconnect();
}
}
/**
* Pipes everything from the reader to the writer via a buffer
*/
private static void pipe(Reader reader, Writer writer) throws IOException
{
char[] buf = new char[1024];
int read = 0;
while ((read = reader.read(buf)) >= 0)
{
writer.write(buf, 0, read);
}
writer.flush();
}
}


 class WriteExcel {

	private WritableCellFormat timesBoldUnderline;
	private WritableCellFormat times;
	private String inputFile;

public void setOutputFile(String inputFile) {
	this.inputFile = inputFile;
	}

	public void write() throws IOException, WriteException {
		File file = new File(inputFile);
		WorkbookSettings wbSettings = new WorkbookSettings();

		wbSettings.setLocale(new Locale("en", "EN"));

		WritableWorkbook workbook = Workbook.createWorkbook(file, wbSettings);
		workbook.createSheet("Report", 0);
		WritableSheet excelSheet = workbook.getSheet(0);
		//createLabel(excelSheet);
		//createContent(excelSheet);

		workbook.write();
		workbook.close();
	}

	public void createLabel(WritableSheet sheet,Date s,Date e)
			throws WriteException {
		// Lets create a times font
		WritableFont times10pt = new WritableFont(WritableFont.TIMES, 12);
		// Define the cell format
		times = new WritableCellFormat(times10pt);
		// Lets automatically wrap the cells
		times.setWrap(true);

		// Create create a bold font with unterlines
		WritableFont times10ptBoldUnderline = new WritableFont(
				WritableFont.TIMES, 12, WritableFont.BOLD, false,
				UnderlineStyle.NO_UNDERLINE);
		timesBoldUnderline = new WritableCellFormat(times10ptBoldUnderline);
		// Lets automatically wrap the cells
		timesBoldUnderline.setWrap(true);

		CellView cv = new CellView();
		cv.setFormat(times);
		cv.setFormat(timesBoldUnderline);
		cv.setAutosize(true);
                //pr.println(barcode +" \t "+pages+ " \t "+ lan + " \t "+ title + " \t "+ start + " \t "+ end);
		// Write a few headers
		addCaption(sheet, 0, 0, "Report for IMLS Cost Analysis for period between "+s+" to "+e);
		addCaption(sheet, 0, 1, "Barcode");
                addCaption(sheet, 1, 1, "Pages");
                addCaption(sheet, 2, 1, "Language");
                addCaption(sheet, 3, 1, "Title");
                addCaption(sheet, 4, 1, "Description");
                addCaption(sheet, 5, 1, "Date OCR Finished");
                addCaption(sheet,6,1,"Dimension");


	}

	public void createContent(WritableSheet sheet,int row, String[] vals) throws WriteException,
			RowsExceededException {
		// Write a few number
		/*for (int i = 0; i < 7; i++) {
			// First column
			addNumber(sheet, 0, i, i + 10);
			// Second column
			addNumber(sheet, 1, i, i * i);
		}
		// Lets calculate the sum of it
		StringBuffer buf = new StringBuffer();
		buf.append("SUM(A2:A10)");
		Formula f = new Formula(0, 10, buf.toString());
		sheet.addCell(f);
		buf = new StringBuffer();
		buf.append("SUM(B2:B10)");
		f = new Formula(1, 10, buf.toString());
		sheet.addCell(f);*/

		// Now a bit of text
            System.out.print(row+" ");
		for (int i = 0; i < 7; i++) {
			// First column
			addLabel(sheet, i, row, vals[i]);
                        System.out.print(vals[i]+" ");
			// Second column
			//addLabel(sheet, 1, i, "Another text");*/
		}
            System.out.println();
	}

	public void addCaption(WritableSheet sheet, int column, int row, String s)
			throws RowsExceededException, WriteException {
		Label label;
		label = new Label(column, row, s, timesBoldUnderline);
		sheet.addCell(label);
	}

	private void addNumber(WritableSheet sheet, int column, int row,
			Integer integer) throws WriteException, RowsExceededException {
		Number number;
		number = new Number(column, row, integer, times);
		sheet.addCell(number);
	}
        public void addLabel(WritableSheet sheet, int column, int row, String s)
			throws WriteException, RowsExceededException {
		Label label;
		label = new Label(column, row, s, times);
		sheet.addCell(label);
	}



}

 class Tunnel {
ChannelSftp channel;
Connection con = null;
public void go() {
int aport=0;
try{
String host="gwdspace.wrlc.org";
String user="dspace";
String password="GwDSpace3918";
int port=9999;
int tunnelLocalPort=8440;
String tunnelRemoteHost="gwdspace.wrlc.org";
int tunnelRemotePort=3306;
JSch jsch=new JSch();
Session session=jsch.getSession(user, host, port);
java.util.Properties config = new java.util.Properties();
config.put("StrictHostKeyChecking", "no");
session.setConfig(config);
System.out.println(session.getUserName());
session.setPassword(password);
//localUserInfo lui=new localUserInfo();
//session.setUserInfo(lui);
session.connect();
channel = (ChannelSftp) session.openChannel("sftp");
channel.connect();
aport=session.setPortForwardingL(tunnelLocalPort,host,tunnelRemotePort);
System.out.println(session.getPortForwardingL());
System.out.println("Connected "+aport);
Class.forName("com.mysql.jdbc.Driver");
String url = "jdbc:mysql://127.0.0.1:8440/bagdb";
// Get a connection to the database for a
// user named auser with the password
// drowssap, which is password spelled
// backwards.

// DriverManager.setLoginTimeout(1);
System.out.println(DriverManager.getLoginTimeout());
con = DriverManager.getConnection(url, "bagit","GWbaGit");
//return con;
//Thread.sleep(10000);
}
catch(Exception e)
{
System.out.println(e);
}
//return con;
}
public void getRecord(Connection conn,Date d1,Date d2,File file)
{
   try
   {
        String qry = "SELECT o.customer_barcode,o.numberOfPages,w.dateStarted,w.DateEnded FROM OrderBookWorkflowStep w join OrderBook o on w.orderBook_ID=o.ID where w.WorkflowStep_Code='OCR'";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(qry);
            Statement s = con.createStatement();
            ResultSet r = null;
            //File file = new File("c:\\test.xls");
            WriteExcel testwrite = new WriteExcel();
            WorkbookSettings wbSettings = new WorkbookSettings();

		wbSettings.setLocale(new Locale("en", "EN"));

		WritableWorkbook workbook = Workbook.createWorkbook(file, wbSettings);
		workbook.createSheet("Report", 0);
		WritableSheet excelSheet = workbook.getSheet(0);
		testwrite.createLabel(excelSheet,d1,d2);




            //PrintWriter pr = new PrintWriter(test);
            //pr.println("Barcode \t Pages \t Language \t Title \t Start Date,\t End Date" );
            String filter,lan,desc,title,barcode,start,end,pages;
            String[] vals = new String[7];
            String dimension="";
            int i =2;
            while (rs.next())
            {
                try
                {
                    dimension="";
                    r=s.executeQuery("select bag_name from bag_record where item_barcode like"+"'"+rs.getString(1)+"' and bag_type='ACCESS'");
                    if(r.next())
                    {
                        //bag_name=r.getString(1);
                        System.out.println("/dspace1/assetstore-ro/"+rs.getString(1)+"/"+r.getString(1)+"/data/JPEG2K/tiff0.jp2");
                        channel.get("/dspace1/assetstore-ro/"+rs.getString(1)+"/"+r.getString(1)+"/data/JPEG2K/tiff0.jp2","c:\\tiff0.jp2");
                        File f = new File("c:\\tiff0.jp2");
                        if(f.exists())
                        {
                            //Process p = Runtime.getRuntime().exec("c:\\Program Files (x86)\\exiv2\\exiv2 -PEkyct "+f.getAbsolutePath());
                            //InputStream in = p.getInputStream();
                            //BufferedReader bf = new BufferedReader(new InputStreamReader(in));
                            //String line = bf.readLine();
                            Iterator readers = ImageIO.getImageReadersByFormatName("jpeg2000");
                            //Iterator readers = ImageIO.getImageReadersByFormatName("cr2");
                            ImageReader reader = (ImageReader)readers.next();
                            String readFormats[] = ImageIO.getReaderMIMETypes();
                            System.out.println(Arrays.asList(readFormats));
                            RenderedImage jp2img = ImageIO.read(f);
                            dimension = jp2img.getWidth() +"x"+ jp2img.getHeight();
                            f.delete();
                        }
                    }

                



                String val=HTTPRequestPoster.sendGetRequest("http://gwdroid.wrlc.org/barcode/getmarc.php", "barcode="+rs.getString(1));
                StringTokenizer st = new StringTokenizer(val, "|");
                filter="";
                lan="";
                desc="";
                title="";
                barcode="";
                start="";
                end="";
                pages="";
                  /*if(st.hasMoreTokens())
                   {
                       filter = st.nextToken();
                   }*/
                if(st.hasMoreTokens())
                   {
                    vals[2] = st.nextToken();//language
                   }
                if(st.hasMoreTokens())
                   {
                   vals[3] = st.nextToken();//title
                }
                if(st.hasMoreTokens())
                   {
                        vals[4] = st.nextToken();//description
                }

                    vals[0] = rs.getString(1);//barcode


                   // start = rs.getString(3);


                        vals[5] = rs.getString(4);//end date

                        vals[6]=dimension;
                    vals[1] = rs.getString(2);//pages

                    //pr.println(barcode +" \t "+pages+ " \t "+ lan + " \t "+ title + " \t "+ start + " \t "+ end);
                    testwrite.createContent(excelSheet, i, vals);
                    i++;
}
                catch(Exception e)
                {
                    System.out.println(e);
                }

            }
            
                //pr.close();
            workbook.write();
            workbook.close();
                System.out.println("done");



        }
        catch (Exception e)
        {
            e.printStackTrace();
        }



}
}